name: Release Workflow

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    outputs:
      new_release_published: ${{ steps.semantic_release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic_release_version.outputs.new_release_version }}
      ig_canonical: ${{ steps.yaml-data.outputs.canonical }}
      ig_id: ${{ steps.yaml-data.outputs.id }}
      ig_asset_filename: ${{ steps.generate-asset-filename.outputs.ig_asset_filename }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: |
          sudo snap install yq
          npm install @semantic-release/changelog @semantic-release/github

      - name: Semantic Release (Determine new version)
        id: semantic_release_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/github
          dry_run: true
          ci: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output new release version
        run: |
          echo Version: ${{ steps.semantic_release_version.outputs.new_release_version }}
          echo new_release_published: ${{ steps.semantic_release_version.outputs.new_release_published }}

      - name: Update sushi-config.yaml with new version
        run: |
          yq eval '.version = "${{ steps.semantic_release_version.outputs.new_release_version }}"' -i sushi-config.yaml

      # read id, version and canonical from sushi-config.yaml
      - name: Read YAML file
        id: yaml-data
        run: |
          VERSION=$(yq eval '.version' sushi-config.yaml)
          ID=$(yq eval '.id' sushi-config.yaml)
          CANONICAL=$(yq eval '.canonical' sushi-config.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "canonical=$CANONICAL" >> $GITHUB_OUTPUT

      - name: Generate asset filename
        id: generate-asset-filename
        run: echo "ig_asset_filename=${{ steps.yaml-data.outputs.id }}-${{ steps.semantic_release_version.outputs.new_release_version }}.tgz" >> $GITHUB_OUTPUT

      # display outputs from read-yaml action
      - name: Display read-yaml output
        run: |
          echo "id: ${{ steps.yaml-data.outputs.id }}"
          echo "target url: ${{ steps.yaml-data.outputs.canonical }}"
          echo "version: ${{ steps.yaml-data.outputs.version }}"
          echo "asset filename: ${{ steps.generate-asset-filename.outputs.ig_asset_filename }}"

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          args: ./run-ig-publisher.sh

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          force_orphan: true

      - name: Semantic Release (Create release)
        id: semantic_release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/github
          ci: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-package-feed:
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Output new release version
        run: |
          echo ${{ needs.release.outputs.new_release_version }}

      - name: Install dependencies
        run: |
          sudo apt-get install -y xmlstarlet

      # Checkout the external repository where package-feed.xml is located
      - name: Checkout external repository
        uses: actions/checkout@v3
        with:
          repository: 'umg-minai/fhir-package-feed-test'
          token: ${{ secrets.FHIR_PACKAGE_FEED_REPO_TOKEN }} # Ensure this token has access to the external repo
          path: 'external-repo'

      # Update package-feed.xml in the external repository
      - name: Update package-feed.xml
        run: |
          cd external-repo

          TITLE="${{ needs.release.outputs.ig_id }}#${{ needs.release.outputs.new_release_version }}"
          NEW_LINK="https://github.com/${{ github.repository }}/releases/download/${{ needs.release.outputs.new_release_version }}/${{ steps.generate-asset-filename.outputs.ig_asset_filename }}?raw=true"
          NEW_GUID=NEW_LINK
          DESCRIPTION="Release ${{ needs.release.outputs.new_release_version }} of ${{ needs.release.outputs.ig_id }}"
          PUB_DATE=$(date -u +"%a, %d %b %Y %H:%M:%S %Z")

          XML_FILE="package-feed.xml"
          ITEM_EXISTS=$(xmlstarlet sel -t -v "count(/rss/channel/item[title='$TITLE'])" $XML_FILE)

          if [ "$ITEM_EXISTS" -eq "0" ]; then
            echo "Item does not exist, adding new item..."
            xmlstarlet ed --inplace \
              -s /rss/channel -t elem -n item -v "" \
              -s "//item[last()]" -t elem -n title -v "$TITLE" \
              -s "//item[last()]" -t elem -n description -v "$DESCRIPTION" \
              -s "//item[last()]" -t elem -n link -v "$NEW_LINK" \
              -s "//item[last()]" -t elem -n guid -v "$NEW_GUID" \
              -s "//item[last()]" -t elem -n dc:creator -v "$NEW_GUID" \
              -s "//item[last()]" -t elem -n fhir:version -v "$NEW_GUID" \
              -s "//item[last()]" -t elem -n fhir:kind -v "IG" \
              -s "//item[last()]" -t elem -n pubDate -v "$PUB_DATE" \
              $XML_FILE
          else
            echo "Item exists, updating..."
            xmlstarlet ed --inplace \
              -u "/rss/channel/item[title='$TITLE']/link" -v "$NEW_LINK" \
              -u "/rss/channel/item[title='$TITLE']/guid" -v "$NEW_GUID" \
              -u "/rss/channel/item[title='$TITLE']/description" -v "$DESCRIPTION" \
              -u "/rss/channel/item[title='$TITLE']/dc:creator" -v "$NEW_GUID" \
              -u "/rss/channel/item[title='$TITLE']/fhir:version" -v "$NEW_GUID" \
              -u "/rss/channel/item[title='$TITLE']/fhir:kind" -v "IG" \
              -u "/rss/channel/item[title='$TITLE']/pubDate" -v "$PUB_DATE" \
              $XML_FILE
          fi
        shell: bash

      # Commit and push the changes to the external repository
      - name: Commit and push changes
        run: |
          cd external-repo
          git config user.name '${{ github.actor }}'
          git config user.email '${{ github.actor }}@users.noreply.github.com'
          git add package-feed.xml
          git commit -m "Update package-feed.xml with new release information"
          git push