name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Type of release (major, minor, patch, prerelease). Set "auto" for automatic determination.'
        required: false
        default: 'auto'
        type: choice
        options: 
        - auto
        - prerelease
        - patch
        - minor
        - major
      noop:
        type: boolean
        description: 'Run in dry-run mode? Set to "true" to enable.'
        required: true
        default: false
      prerelease_token:
        type: string
        description: 'Prerelease token to use for prerelease versions.'
        required: false
        default: 'rc'
      add_branch_date:
        type: boolean
        description: 'Add branch and data to release name.'
        required: false
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
        
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install yq
        run: |
          sudo snap install yq

      - name: Install dependencies
        run: |
          npm install @semantic-release/changelog @semantic-release/github

      - name: Semantic Release (Determine new version)
        id: semantic_release_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/github
          dry_run: true
          ci: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update sushi-config.yaml with new version
        run: |
          yq eval '.version = "${{ steps.semantic_release_version.outputs.new_release_version }}"' -i sushi-config.yaml

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          args: ./run-ig-publisher.sh

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          force_orphan: true

      - name: Semantic Release (Create release)
        id: semantic_release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: cycjimmy/semantic-release-action@v4
        with:
          branch: main
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/github
          ci: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Do something when a new release published
        if: steps.semantic_release.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic_release.outputs.new_release_version }}
          echo ${{ steps.semantic_release.outputs.new_release_major_version }}
          echo ${{ steps.semantic_release.outputs.new_release_minor_version }}
          echo ${{ steps.semantic_release.outputs.new_release_patch_version }}

      # Checkout the external repository where package-feed.xml is located
      - name: Checkout external repository
        uses: actions/checkout@v3
        with:
          repository: 'umg-minai/fhir-package-feed-test'
          token: ${{ secrets.FHIR_PACKAGE_FEED_REPO_TOKEN }} # Ensure this token has access to the external repo
          path: 'external-repo'

      # Update package-feed.xml in the external repository
      - name: Update package-feed.xml
        run: |
          cd external-repo
          yq eval --inplace '
            .channel.item |= map(
              if .title == "de.netzwerk-universitaetsmedizin.ebm-cpg#${{ steps.semantic_release.outputs.new_release_version }}" then
                .link = "new link here" # Modify as needed
                .guid = "new link here" # Modify as needed
                .pubDate = "$(date -u +"%a, %d %b %Y %H:%M:%S %Z")" # Updates pubDate to current UTC time
              else .
              end
            )' package-feed.xml

      # Commit and push the changes to the external repository
      - name: Commit and push changes
        run: |
          cd external-repo
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          git add package-feed.xml
          git commit -m "Update package-feed.xml with new release information"
          git push